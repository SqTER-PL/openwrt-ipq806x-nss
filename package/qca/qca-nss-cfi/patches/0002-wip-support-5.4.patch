From 8c2da7fe5efadf2c741e33e5f305705335cc5987 Mon Sep 17 00:00:00 2001
From: Ansuel Smith <ansuelsmth@gmail.com>
Date: Sat, 13 Jun 2020 12:58:26 +0200
Subject: [PATCH 2/2] wip: support 5.4

---
 0001-compile-only-cryptoapi.patch   | 30 +++++++++++
 0002-wip-support-5.4.patch          | 82 +++++++++++++++++++++++++++++
 cryptoapi/v1.1/nss_cryptoapi.c      |  1 -
 cryptoapi/v1.1/nss_cryptoapi_ablk.c | 12 ++---
 cryptoapi/v1.1/nss_cryptoapi_aead.c |  2 +-
 5 files changed, 119 insertions(+), 8 deletions(-)
 create mode 100644 0001-compile-only-cryptoapi.patch
 create mode 100644 0002-wip-support-5.4.patch

diff --git a/0001-compile-only-cryptoapi.patch b/0001-compile-only-cryptoapi.patch
new file mode 100644
index 0000000..e599c0a
--- /dev/null
+++ b/0001-compile-only-cryptoapi.patch
@@ -0,0 +1,30 @@
+From a8a573c5ce83bdddca9a60c62161638a5fd906d4 Mon Sep 17 00:00:00 2001
+From: Ansuel Smith <ansuelsmth@gmail.com>
+Date: Sat, 13 Jun 2020 12:57:14 +0200
+Subject: [PATCH 1/2] compile only cryptoapi
+
+---
+ Makefile | 8 ++++----
+ 1 file changed, 4 insertions(+), 4 deletions(-)
+
+diff --git a/Makefile b/Makefile
+index c42adca..36a9d3f 100644
+--- a/Makefile
++++ b/Makefile
+@@ -4,9 +4,9 @@
+ 
+ export BUILD_ID = \"Build Id: $(shell date +'%m/%d/%y, %H:%M:%S')\"
+ 
+-obj-m += $(CFI_OCF_DIR)/
++# obj-m += $(CFI_OCF_DIR)/
+ obj-m += $(CFI_CRYPTOAPI_DIR)/
+ 
+-ifeq ($(SoC),$(filter $(SoC),ipq806x))
+-obj-m += $(CFI_IPSEC_DIR)/
+-endif
++# ifeq ($(SoC),$(filter $(SoC),ipq806x))
++# obj-m += $(CFI_IPSEC_DIR)/
++# endif
+-- 
+2.27.0.rc0
+
diff --git a/0002-wip-support-5.4.patch b/0002-wip-support-5.4.patch
new file mode 100644
index 0000000..2b06fc7
--- /dev/null
+++ b/0002-wip-support-5.4.patch
@@ -0,0 +1,82 @@
+From 26caa1f885b40da5c3582dde642d658461c02854 Mon Sep 17 00:00:00 2001
+From: Ansuel Smith <ansuelsmth@gmail.com>
+Date: Sat, 13 Jun 2020 12:58:26 +0200
+Subject: [PATCH 2/2] wip: support 5.4
+
+---
+ cryptoapi/v1.1/nss_cryptoapi.c      |  1 -
+ cryptoapi/v1.1/nss_cryptoapi_ablk.c | 20 ++++++++++----------
+ cryptoapi/v1.1/nss_cryptoapi_aead.c |  2 +-
+ 3 files changed, 11 insertions(+), 12 deletions(-)
+
+diff --git a/cryptoapi/v1.1/nss_cryptoapi.c b/cryptoapi/v1.1/nss_cryptoapi.c
+index d1a7313..a10590e 100644
+--- a/cryptoapi/v1.1/nss_cryptoapi.c
++++ b/cryptoapi/v1.1/nss_cryptoapi.c
+@@ -231,7 +231,6 @@ static struct crypto_alg cryptoapi_ablkcipher_algs[] = {
+ 		.cra_u          = {
+ 			.ablkcipher = {
+ 				.ivsize         = CTR_RFC3686_IV_SIZE,
+-				.geniv          = "seqiv",
+ 				.min_keysize    = AES_MIN_KEY_SIZE + CTR_RFC3686_NONCE_SIZE,
+ 				.max_keysize    = AES_MAX_KEY_SIZE + CTR_RFC3686_NONCE_SIZE,
+ 				.setkey         = nss_cryptoapi_ablk_aes_setkey,
+diff --git a/cryptoapi/v1.1/nss_cryptoapi_ablk.c b/cryptoapi/v1.1/nss_cryptoapi_ablk.c
+index 223591c..30aad97 100644
+--- a/cryptoapi/v1.1/nss_cryptoapi_ablk.c
++++ b/cryptoapi/v1.1/nss_cryptoapi_ablk.c
+@@ -108,7 +108,7 @@ EXPORT_SYMBOL(nss_cryptoapi_skcipher_ctx2session);
+ int nss_cryptoapi_ablkcipher_init(struct crypto_tfm *tfm)
+ {
+ 	struct nss_cryptoapi_ctx *ctx = crypto_tfm_ctx(tfm);
+-	struct crypto_ablkcipher *sw_tfm;
++	// struct crypto_skcipher *sw_tfm;
+ 
+ 	nss_cfi_assert(ctx);
+ 
+@@ -122,20 +122,20 @@ int nss_cryptoapi_ablkcipher_init(struct crypto_tfm *tfm)
+ 
+ 	nss_cryptoapi_set_magic(ctx);
+ 
+-	if (!(crypto_tfm_alg_flags(tfm) & CRYPTO_ALG_NEED_FALLBACK))
++	if (!(crypto_tfm_alg_type(tfm) & CRYPTO_ALG_NEED_FALLBACK))
+ 		return 0;
+ 
+ 	/* Alloc fallback transform for future use */
+-	sw_tfm = crypto_alloc_ablkcipher(crypto_tfm_alg_name(tfm), 0, CRYPTO_ALG_ASYNC |
+-									CRYPTO_ALG_NEED_FALLBACK);
+-	if (IS_ERR(sw_tfm)) {
+-		nss_cfi_err("unable to alloc software crypto for %s\n", crypto_tfm_alg_name(tfm));
+-		return -EINVAL;
+-	}
++	// sw_tfm = crypto_alloc_sync_skcipher(crypto_tfm_alg_name(tfm), 0, CRYPTO_ALG_ASYNC |
++	// 								CRYPTO_ALG_NEED_FALLBACK);
++	// if (IS_ERR(sw_tfm)) {
++	// 	nss_cfi_err("unable to alloc software crypto for %s\n", crypto_tfm_alg_name(tfm));
++	// 	return -EINVAL;
++	// }
+ 
+ 	/* set this tfm reqsize same to fallback tfm */
+-	tfm->crt_ablkcipher.reqsize = crypto_ablkcipher_reqsize(sw_tfm);
+-	ctx->sw_tfm = crypto_ablkcipher_tfm(sw_tfm);
++	tfm->crt_ablkcipher.reqsize = sizeof(struct nss_cryptoapi_ctx);
++	// ctx->sw_tfm = crypto_ablkcipher_tfm(sw_tfm);
+ 
+ 	return 0;
+ }
+diff --git a/cryptoapi/v1.1/nss_cryptoapi_aead.c b/cryptoapi/v1.1/nss_cryptoapi_aead.c
+index 527936b..53e4bed 100644
+--- a/cryptoapi/v1.1/nss_cryptoapi_aead.c
++++ b/cryptoapi/v1.1/nss_cryptoapi_aead.c
+@@ -103,7 +103,7 @@ int nss_cryptoapi_aead_init(struct crypto_aead *aead)
+ 
+ 	nss_cryptoapi_set_magic(ctx);
+ 
+-	if (!(crypto_tfm_alg_flags(tfm) & CRYPTO_ALG_NEED_FALLBACK))
++	if (!(crypto_tfm_alg_type(tfm) & CRYPTO_ALG_NEED_FALLBACK))
+ 		return 0;
+ 
+ 	/* Alloc fallback transform for future use */
+-- 
+2.27.0.rc0
+
diff --git a/cryptoapi/v1.1/nss_cryptoapi.c b/cryptoapi/v1.1/nss_cryptoapi.c
index d1a7313..a10590e 100644
--- a/cryptoapi/v1.1/nss_cryptoapi.c
+++ b/cryptoapi/v1.1/nss_cryptoapi.c
@@ -231,7 +231,6 @@ static struct crypto_alg cryptoapi_ablkcipher_algs[] = {
 		.cra_u          = {
 			.ablkcipher = {
 				.ivsize         = CTR_RFC3686_IV_SIZE,
-				.geniv          = "seqiv",
 				.min_keysize    = AES_MIN_KEY_SIZE + CTR_RFC3686_NONCE_SIZE,
 				.max_keysize    = AES_MAX_KEY_SIZE + CTR_RFC3686_NONCE_SIZE,
 				.setkey         = nss_cryptoapi_ablk_aes_setkey,
diff --git a/cryptoapi/v1.1/nss_cryptoapi_ablk.c b/cryptoapi/v1.1/nss_cryptoapi_ablk.c
index 223591c..9b6c65e 100644
--- a/cryptoapi/v1.1/nss_cryptoapi_ablk.c
+++ b/cryptoapi/v1.1/nss_cryptoapi_ablk.c
@@ -108,7 +108,7 @@ EXPORT_SYMBOL(nss_cryptoapi_skcipher_ctx2session);
 int nss_cryptoapi_ablkcipher_init(struct crypto_tfm *tfm)
 {
 	struct nss_cryptoapi_ctx *ctx = crypto_tfm_ctx(tfm);
-	struct crypto_ablkcipher *sw_tfm;
+	struct crypto_cipher *sw_tfm;
 
 	nss_cfi_assert(ctx);
 
@@ -122,20 +122,20 @@ int nss_cryptoapi_ablkcipher_init(struct crypto_tfm *tfm)
 
 	nss_cryptoapi_set_magic(ctx);
 
-	if (!(crypto_tfm_alg_flags(tfm) & CRYPTO_ALG_NEED_FALLBACK))
+	if (!(crypto_tfm_alg_type(tfm) & CRYPTO_ALG_NEED_FALLBACK))
 		return 0;
 
 	/* Alloc fallback transform for future use */
-	sw_tfm = crypto_alloc_ablkcipher(crypto_tfm_alg_name(tfm), 0, CRYPTO_ALG_ASYNC |
-									CRYPTO_ALG_NEED_FALLBACK);
+	sw_tfm = crypto_alloc_cipher(crypto_tfm_alg_name(tfm), 0, CRYPTO_ALG_ASYNC |
+ 									CRYPTO_ALG_NEED_FALLBACK);
 	if (IS_ERR(sw_tfm)) {
 		nss_cfi_err("unable to alloc software crypto for %s\n", crypto_tfm_alg_name(tfm));
 		return -EINVAL;
 	}
 
 	/* set this tfm reqsize same to fallback tfm */
-	tfm->crt_ablkcipher.reqsize = crypto_ablkcipher_reqsize(sw_tfm);
-	ctx->sw_tfm = crypto_ablkcipher_tfm(sw_tfm);
+	tfm->crt_ablkcipher.reqsize = sizeof(struct nss_cryptoapi_ctx);
+	ctx->sw_tfm = crypto_cipher_tfm(sw_tfm);
 
 	return 0;
 }
diff --git a/cryptoapi/v1.1/nss_cryptoapi_aead.c b/cryptoapi/v1.1/nss_cryptoapi_aead.c
index 527936b..53e4bed 100644
--- a/cryptoapi/v1.1/nss_cryptoapi_aead.c
+++ b/cryptoapi/v1.1/nss_cryptoapi_aead.c
@@ -103,7 +103,7 @@ int nss_cryptoapi_aead_init(struct crypto_aead *aead)
 
 	nss_cryptoapi_set_magic(ctx);
 
-	if (!(crypto_tfm_alg_flags(tfm) & CRYPTO_ALG_NEED_FALLBACK))
+	if (!(crypto_tfm_alg_type(tfm) & CRYPTO_ALG_NEED_FALLBACK))
 		return 0;
 
 	/* Alloc fallback transform for future use */
-- 
2.27.0.rc0

