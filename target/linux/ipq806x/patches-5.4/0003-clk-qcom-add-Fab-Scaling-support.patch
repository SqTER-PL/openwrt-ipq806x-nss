From 343bcc5a88573819bae2277245e64dc7d831af44 Mon Sep 17 00:00:00 2001
From: Ansuel Smith <ansuelsmth@gmail.com>
Date: Sat, 22 Feb 2020 17:01:53 +0100
Subject: [PATCH 3/6] clk: qcom: add Fab Scaling support

Add Fab Scaling driver to scale APPS and DDR clk when the
system is idle. Export a symbol to use the scaling data in
a dedicated cpufreq driver.

Signed-off-by: Ansuel Smith <ansuelsmth@gmail.com>
---
 drivers/clk/qcom/Kconfig       |  10 ++
 drivers/clk/qcom/Makefile      |   1 +
 drivers/clk/qcom/fab_scaling.c | 214 +++++++++++++++++++++++++++++++++
 include/linux/fab_scaling.h    |  45 +++++++
 4 files changed, 270 insertions(+)
 create mode 100644 drivers/clk/qcom/fab_scaling.c
 create mode 100644 include/linux/fab_scaling.h

diff --git a/drivers/clk/qcom/Kconfig b/drivers/clk/qcom/Kconfig
index 15cdcdc9b3b8..c14e227d1dca 100644
--- a/drivers/clk/qcom/Kconfig
+++ b/drivers/clk/qcom/Kconfig
@@ -7,6 +7,16 @@ config QCOM_GDSC
 	bool
 	select PM_GENERIC_DOMAINS if PM
 
+config QCOM_FAB_SCALING
+	tristate "Fab Scaling Scaling Support"
+	depends on ARCH_QCOM || COMPILE_TEST
+	help
+	  Enable Support for the Fab Scaling present on Krait SoCs
+	  Say Y if you want the cpufreq driver to scale the APPS and
+	  DDR clk with the CPU clk. By default the clk are set to
+	  the max rate.
+
+
 config QCOM_RPMCC
 	bool
 
diff --git a/drivers/clk/qcom/Makefile b/drivers/clk/qcom/Makefile
index 656a87e629d4..1f5fb0ed8abe 100644
--- a/drivers/clk/qcom/Makefile
+++ b/drivers/clk/qcom/Makefile
@@ -15,6 +15,7 @@ clk-qcom-$(CONFIG_KRAIT_CLOCKS) += clk-krait.o
 clk-qcom-y += clk-hfpll.o
 clk-qcom-y += reset.o
 clk-qcom-$(CONFIG_QCOM_GDSC) += gdsc.o
+clk-qcom-$(CONFIG_QCOM_FAB_SCALING) += fab_scaling.o
 
 # Keep alphabetically sorted by config
 obj-$(CONFIG_APQ_GCC_8084) += gcc-apq8084.o
diff --git a/drivers/clk/qcom/fab_scaling.c b/drivers/clk/qcom/fab_scaling.c
new file mode 100644
index 000000000000..74fcebe77aa2
--- /dev/null
+++ b/drivers/clk/qcom/fab_scaling.c
@@ -0,0 +1,214 @@
+/*
+ * Copyright (c) 2015, The Linux Foundation. All rights reserved.
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/err.h>
+#include <linux/io.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/clk.h>
+#include <linux/clk-provider.h>
+#include <linux/slab.h>
+#include <linux/fab_scaling.h>
+
+/* Fabrics is used by both CPU and NSS core
+ * Every consumer must be registred to be checked when scale_fabrics is called
+ */
+#define MAX_CONSUMER 2
+
+struct qcom_fab_scaling_data {
+	u32 fab_freq_high;
+	u32 fab_freq_nominal;
+	struct clk *apps_fab_clk;
+	struct clk *ddr_fab_clk;
+};
+
+static struct qcom_fab_scaling_data *drv_data;
+static struct fab_scaling_info consumers[MAX_CONSUMER];
+
+int scale_fabrics(unsigned long max_freq, enum fab_consumers type)
+{
+	struct clk *apps_fab_clk = drv_data->apps_fab_clk,
+		   *ddr_fab_clk = drv_data->ddr_fab_clk;
+	unsigned long target_freq, cur_freq;
+	unsigned int idle_freq = consumers[type].idle_freq, old_max_clk;
+	int i, ret;
+
+	/* Skip fab scaling if the driver is not ready */
+	if (!apps_fab_clk || !ddr_fab_clk)
+		return 0;
+
+	if (idle_freq == 0)
+		return 0;
+
+	if (max_freq != consumers[type].old_max_clk)
+		consumers[type].old_max_clk = max_freq;
+
+	target_freq = drv_data->fab_freq_nominal;
+
+	for (i = 0; i < MAX_CONSUMER; i++) {
+		idle_freq = consumers[i].idle_freq;
+		old_max_clk = consumers[i].old_max_clk;
+		if (idle_freq != 0 && old_max_clk > idle_freq) {
+			target_freq = drv_data->fab_freq_high;
+			break;
+		}
+	}
+
+	cur_freq = clk_get_rate(ddr_fab_clk);
+
+	if (target_freq != cur_freq) {
+		ret = clk_set_rate(apps_fab_clk, target_freq);
+		if (ret)
+			return ret;
+		ret = clk_set_rate(ddr_fab_clk, target_freq);
+		if (ret)
+			return ret;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL(scale_fabrics);
+
+int fab_scaling_register(unsigned int idle_freq, enum fab_consumers type)
+{
+	if (idle_freq == 0)
+		return -1;
+
+	if (consumers[type].idle_freq != 0) {
+		pr_err("Fab consumer already registered!\n");
+		return -1;
+	}
+
+	consumers[type].idle_freq = idle_freq;
+
+	return 0;
+}
+EXPORT_SYMBOL(fab_scaling_register);
+
+int fab_scaling_unregister(enum fab_consumers type)
+{
+	consumers[type].idle_freq = 0;
+	return 0;
+}
+EXPORT_SYMBOL(fab_scaling_unregister);
+
+static int ipq806x_fab_scaling_probe(struct platform_device *pdev)
+{
+	struct device_node *np = pdev->dev.of_node;
+	struct clk *apps_fab_clk, *ddr_fab_clk;
+	int ret;
+
+	if (!np)
+		return -ENODEV;
+
+	drv_data = kzalloc(sizeof(*drv_data), GFP_KERNEL);
+	if (!drv_data)
+		return -ENOMEM;
+
+	if (of_property_read_u32(np, "fab_freq_high",
+				 &drv_data->fab_freq_high)) {
+		dev_err(&pdev->dev,
+			"FABRICS turbo freq not found. Using defaults...\n");
+		drv_data->fab_freq_high = 533000000;
+	}
+
+	if (of_property_read_u32(np, "fab_freq_nominal",
+				 &drv_data->fab_freq_nominal)) {
+		dev_err(&pdev->dev,
+			"FABRICS nominal freq not found. Using defaults...\n");
+		drv_data->fab_freq_nominal = 400000000;
+	}
+
+	apps_fab_clk = devm_clk_get(&pdev->dev, "apps-fab-clk");
+	ret = PTR_ERR_OR_ZERO(apps_fab_clk);
+	if (ret) {
+		/*
+		 * If apps fab clk node is present, but clock is not yet
+		 * registered, we should try defering probe.
+		 */
+		if (ret != -EPROBE_DEFER) {
+			dev_err(&pdev->dev,
+				"Failed to get APPS FABRIC clock: %d\n", ret);
+			ret = -ENODEV;
+		}
+		goto err;
+	}
+
+	clk_prepare_enable(apps_fab_clk);
+	clk_set_rate(apps_fab_clk, drv_data->fab_freq_high);
+	drv_data->apps_fab_clk = apps_fab_clk;
+
+	ddr_fab_clk = devm_clk_get(&pdev->dev, "ddr-fab-clk");
+	ret = PTR_ERR_OR_ZERO(ddr_fab_clk);
+	if (ret) {
+		/*
+		 * If ddr fab clk node is present, but clock is not yet
+		 * registered, we should try defering probe.
+		 */
+		if (ret != -EPROBE_DEFER) {
+			dev_err(&pdev->dev,
+				"Failed to get DDR FABRIC clock: %d\n", ret);
+			ddr_fab_clk = NULL;
+			ret = -ENODEV;
+		}
+		goto err;
+	}
+
+	clk_set_rate(ddr_fab_clk, drv_data->fab_freq_high);
+	clk_prepare_enable(ddr_fab_clk);
+	drv_data->ddr_fab_clk = ddr_fab_clk;
+
+	return 0;
+err:
+	kfree(drv_data);
+	return ret;
+}
+
+static int ipq806x_fab_scaling_remove(struct platform_device *pdev)
+{
+	kfree(drv_data);
+	return 0;
+}
+
+static const struct of_device_id fab_scaling_ipq806x_match_table[] = {
+	{ .compatible = "qcom,fab-scaling" },
+	{}
+};
+
+static struct platform_driver fab_scaling_ipq806x_driver = {
+	.probe		= ipq806x_fab_scaling_probe,
+	.remove		= ipq806x_fab_scaling_remove,
+	.driver		= {
+		.name   = "fab-scaling",
+		.of_match_table = fab_scaling_ipq806x_match_table,
+	},
+};
+
+static int __init fab_scaling_ipq806x_init(void)
+{
+	return platform_driver_register(&fab_scaling_ipq806x_driver);
+}
+late_initcall(fab_scaling_ipq806x_init);
+
+static void __exit fab_scaling_ipq806x_exit(void)
+{
+	platform_driver_unregister(&fab_scaling_ipq806x_driver);
+}
+module_exit(fab_scaling_ipq806x_exit);
diff --git a/include/linux/fab_scaling.h b/include/linux/fab_scaling.h
new file mode 100644
index 000000000000..37d7f91d9ac3
--- /dev/null
+++ b/include/linux/fab_scaling.h
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) 2015, The Linux Foundation. All rights reserved.
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+
+#ifndef __FAB_SCALING_H
+#define __FAB_SCALING_H
+
+enum fab_consumers {
+        CPU,
+        NSS
+};
+
+struct fab_scaling_info {
+	unsigned int old_max_clk;
+	unsigned int idle_freq;
+};
+
+/**
+ * scale_fabrics - Scale DDR and APPS FABRICS
+ *
+ * This function monitors all the registered clocks and does APPS
+ * and DDR FABRIC scaling based on the idle frequencies with which
+ * it was registered.
+ *
+ */
+int scale_fabrics(unsigned long max_freq, enum fab_consumers type);
+
+int fab_scaling_register(unsigned int idle_freq, enum fab_consumers type);
+
+int fab_scaling_unregister(enum fab_consumers type);
+
+#endif
-- 
2.27.0

