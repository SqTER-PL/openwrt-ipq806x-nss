From c91435c739940e03f6e79a1bd0ee008f837531df Mon Sep 17 00:00:00 2001
From: Ansuel Smith <ansuelsmth@gmail.com>
Date: Sat, 22 Feb 2020 16:33:10 +0100
Subject: [PATCH 1/6] cpufreq: add Krait dedicated scaling driver

This new driver is based on generic cpufreq-dt driver.
Krait SoCs have 2-4 cpu and one shared L2 cache that can
operate at different frequency based on the maxium cpu clk
across all core.
L2 frequency and voltage are scaled on every frequency change
if neededy. On Krait SoCs is present a bug that can cause
transition problem between frequency bin, to workaround this
on more than one transition, the L2 frequency is first set to the
base rate and then to the target rate.

Signed-off-by: Ansuel Smith <ansuelsmth@gmail.com>
---
 drivers/cpufreq/Kconfig.arm        |   9 +
 drivers/cpufreq/Makefile           |   1 +
 drivers/cpufreq/krait-cpufreq-dt.c | 492 +++++++++++++++++++++++++++++
 3 files changed, 502 insertions(+)
 create mode 100644 drivers/cpufreq/krait-cpufreq-dt.c

diff --git a/drivers/cpufreq/Kconfig.arm b/drivers/cpufreq/Kconfig.arm
index 3858d86cf409..fe522c1cab6e 100644
--- a/drivers/cpufreq/Kconfig.arm
+++ b/drivers/cpufreq/Kconfig.arm
@@ -126,6 +126,15 @@ config ARM_OMAP2PLUS_CPUFREQ
 	depends on ARCH_OMAP2PLUS
 	default ARCH_OMAP2PLUS
 
+config ARM_QCOM_KRAIT_CPUFREQ_DT
+	tristate "CPU Frequency scaling support for Krait SoCs"
+	depends on ARM
+	select PM_OPP
+	help
+	  This adds the CPUFreq driver for Qualcomm Krait SoC based boards.
+
+	  If in doubt, say N.
+
 config ARM_QCOM_CPUFREQ_NVMEM
 	tristate "Qualcomm nvmem based CPUFreq"
 	depends on ARM64
diff --git a/drivers/cpufreq/Makefile b/drivers/cpufreq/Makefile
index f6670c4abbb0..ebc35b2a8e4a 100644
--- a/drivers/cpufreq/Makefile
+++ b/drivers/cpufreq/Makefile
@@ -63,6 +63,7 @@ obj-$(CONFIG_ARM_PXA2xx_CPUFREQ)	+= pxa2xx-cpufreq.o
 obj-$(CONFIG_PXA3xx)			+= pxa3xx-cpufreq.o
 obj-$(CONFIG_ARM_QCOM_CPUFREQ_HW)	+= qcom-cpufreq-hw.o
 obj-$(CONFIG_ARM_QCOM_CPUFREQ_NVMEM)	+= qcom-cpufreq-nvmem.o
+obj-$(CONFIG_ARM_QCOM_KRAIT_CPUFREQ_DT)	+= krait-cpufreq-dt.o
 obj-$(CONFIG_ARM_RASPBERRYPI_CPUFREQ) 	+= raspberrypi-cpufreq.o
 obj-$(CONFIG_ARM_S3C2410_CPUFREQ)	+= s3c2410-cpufreq.o
 obj-$(CONFIG_ARM_S3C2412_CPUFREQ)	+= s3c2412-cpufreq.o
diff --git a/drivers/cpufreq/krait-cpufreq-dt.c b/drivers/cpufreq/krait-cpufreq-dt.c
new file mode 100644
index 000000000000..64b35cae2da4
--- /dev/null
+++ b/drivers/cpufreq/krait-cpufreq-dt.c
@@ -0,0 +1,492 @@
+#include <linux/clk.h>
+#include <linux/cpu.h>
+#include <linux/cpufreq.h>
+#include <linux/cpumask.h>
+#include <linux/err.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/pm_opp.h>
+#include <linux/platform_device.h>
+#include <linux/regulator/consumer.h>
+#include <linux/slab.h>
+#include <linux/thermal.h>
+
+#include "cpufreq-dt.h"
+
+struct private_data {
+	struct opp_table *opp_table;
+	struct device *cpu_dev;
+	const char *reg_name;
+	struct clk *l2_clk; /* L2 clock */
+	unsigned int l2_volt_tol; /* L2 voltage tolerance */
+};
+
+struct shared_data {
+	struct regulator *l2_regulator; /* L2 supply */
+	unsigned int l2_rate[3]; /* L2 bus clock rate */
+	bool l2_rate_set;
+	unsigned int l2_cpufreq[3]; /* L2 target CPU frequency */
+	unsigned int l2_volt[3]; /* L2 voltage array */
+	bool l2_volt_set;
+
+	unsigned long *curr_freq_table;
+	unsigned long curr_l2_freq;
+	unsigned long curr_l2_volt;
+};
+
+static struct shared_data *cpus_shared_data;
+
+static int set_target(struct cpufreq_policy *policy, unsigned int index)
+{
+	struct private_data *priv = policy->driver_data;
+	unsigned long freq = policy->freq_table[index].frequency;
+	struct clk *l2_clk = priv->l2_clk;
+	struct regulator *l2_regulator = cpus_shared_data->l2_regulator;
+	unsigned long l2_freq, target_l2_freq;
+	unsigned long l2_vol, target_l2_volt;
+	unsigned long target_freq;
+	int ret;
+
+	ret = dev_pm_opp_set_rate(priv->cpu_dev, freq * 1000);
+
+	if (!ret) {
+		if (cpus_shared_data->l2_rate_set) {
+			int cpu, l2_index, tol = 0;
+			target_freq = freq * 1000;
+
+			cpus_shared_data->curr_freq_table[policy->cpu] =
+				target_freq;
+			for_each_present_cpu (cpu)
+				if (cpu != policy->cpu)
+					target_freq = max(
+						target_freq,
+						cpus_shared_data
+							->curr_freq_table[cpu]);
+
+			for (l2_index = 2; l2_index > 0; l2_index--)
+				if (target_freq >=
+				    cpus_shared_data->l2_cpufreq[l2_index])
+					break;
+
+			l2_freq = cpus_shared_data->curr_l2_freq;
+			target_l2_freq = cpus_shared_data->l2_rate[l2_index];
+
+			/* scale only if needed */
+			if (l2_freq != target_l2_freq) {
+				/*
+				 * Set to idle bin if switching from normal to high bin 
+				 * or vice versa. It has been notice that a bug is triggered
+				 * in cache scaling when more than one bin is scaled, to fix
+				 * this we first need to transition to the base rate and then
+				 * to target rate
+				 */
+				if ((l2_index == 2 &&
+				     l2_freq == cpus_shared_data->l2_rate[1]) ||
+				    (l2_index == 1 &&
+				     l2_freq == cpus_shared_data->l2_rate[2])) {
+					ret = clk_set_rate(
+						l2_clk,
+						cpus_shared_data->l2_rate[0]);
+					if (ret)
+						return ret;
+				}
+
+				/* scale l2 with the core */
+				ret = clk_set_rate(l2_clk, target_l2_freq);
+				if (ret)
+					return ret;
+				cpus_shared_data->curr_l2_freq = target_l2_freq;
+
+				if (cpus_shared_data->l2_volt_set) {
+					l2_vol = cpus_shared_data->curr_l2_volt;
+					target_l2_volt =
+						cpus_shared_data
+							->l2_volt[l2_index];
+
+					if (l2_vol != target_l2_volt) {
+						tol = target_l2_volt *
+						      priv->l2_volt_tol / 100;
+						ret = regulator_set_voltage_tol(
+							l2_regulator,
+							target_l2_volt, tol);
+						if (ret)
+							return ret;
+						cpus_shared_data->curr_l2_volt =
+							target_l2_volt;
+					}
+				}
+			}
+		}
+		arch_set_freq_scale(policy->related_cpus, freq,
+				    policy->cpuinfo.max_freq);
+	}
+
+	return 0;
+}
+
+static const char *find_supply_name(struct device *dev)
+{
+	struct device_node *np;
+	struct property *pp;
+	int cpu = dev->id;
+	const char *name = NULL;
+
+	np = of_node_get(dev->of_node);
+
+	/* This must be valid for sure */
+	if (WARN_ON(!np))
+		return NULL;
+
+	pp = of_find_property(np, "cpu-supply", NULL);
+	if (pp) {
+		name = "cpu";
+		goto node_put;
+	}
+
+	dev_dbg(dev, "no regulator for cpu%d\n", cpu);
+node_put:
+	of_node_put(np);
+	return name;
+}
+
+static int resources_available(void)
+{
+	struct device *cpu_dev;
+	struct regulator *cpu_reg;
+	struct clk *cpu_clk;
+	int ret = 0;
+	const char *name;
+
+	cpu_dev = get_cpu_device(0);
+	if (!cpu_dev) {
+		pr_err("failed to get cpu0 device\n");
+		return -ENODEV;
+	}
+
+	cpu_clk = clk_get(cpu_dev, NULL);
+	ret = PTR_ERR_OR_ZERO(cpu_clk);
+	if (ret) {
+		/*
+		 * If cpu's clk node is present, but clock is not yet
+		 * registered, we should try defering probe.
+		 */
+		if (ret == -EPROBE_DEFER)
+			dev_dbg(cpu_dev, "clock not ready, retry\n");
+		else
+			dev_err(cpu_dev, "failed to get clock: %d\n", ret);
+
+		return ret;
+	}
+
+	clk_put(cpu_clk);
+
+	name = find_supply_name(cpu_dev);
+	/* Platform doesn't require regulator */
+	if (!name)
+		return 0;
+
+	cpu_reg = regulator_get_optional(cpu_dev, name);
+	ret = PTR_ERR_OR_ZERO(cpu_reg);
+	if (ret) {
+		pr_info("regulator find cpufreq");
+		/*
+		 * If cpu's regulator supply node is present, but regulator is
+		 * not yet registered, we should try defering probe.
+		 */
+		if (ret == -EPROBE_DEFER)
+			dev_dbg(cpu_dev, "cpu0 regulator not ready, retry\n");
+		else
+			dev_dbg(cpu_dev, "no regulator for cpu0: %d\n", ret);
+
+		return ret;
+	}
+
+	regulator_put(cpu_reg);
+	return 0;
+}
+
+static int cpufreq_init(struct cpufreq_policy *policy)
+{
+	struct cpufreq_frequency_table *freq_table;
+	struct opp_table *opp_table = NULL;
+	struct private_data *priv;
+	struct device *cpu_dev;
+	struct clk *cpu_clk;
+	unsigned int transition_latency;
+	const char *name;
+	struct device_node *np;
+	struct clk *l2_clk = NULL;
+	int ret;
+
+	cpu_dev = get_cpu_device(policy->cpu);
+	if (!cpu_dev) {
+		pr_err("failed to get cpu%d device\n", policy->cpu);
+		return -ENODEV;
+	}
+
+	cpu_clk = clk_get(cpu_dev, NULL);
+	if (IS_ERR(cpu_clk)) {
+		ret = PTR_ERR(cpu_clk);
+		dev_err(cpu_dev, "%s: failed to get clk: %d\n", __func__, ret);
+		return ret;
+	}
+
+	/* Get OPP-sharing information from "operating-points-v2" bindings */
+	ret = dev_pm_opp_of_get_sharing_cpus(cpu_dev, policy->cpus);
+	if (ret)
+		goto out_put_clk;
+
+	/*
+	 * OPP layer will be taking care of regulators now, but it needs to know
+	 * the name of the regulator first.
+	 */
+	name = find_supply_name(cpu_dev);
+	if (name) {
+		opp_table = dev_pm_opp_set_regulators(cpu_dev, &name, 1);
+		if (IS_ERR(opp_table)) {
+			ret = PTR_ERR(opp_table);
+			dev_err(cpu_dev,
+				"Failed to set regulator for cpu%d: %d\n",
+				policy->cpu, ret);
+			goto out_put_clk;
+		}
+	}
+
+	priv = kzalloc(sizeof(*priv), GFP_KERNEL);
+	if (!priv) {
+		ret = -ENOMEM;
+		goto out_put_regulator;
+	}
+
+	priv->reg_name = name;
+	priv->opp_table = opp_table;
+
+	dev_pm_opp_of_cpumask_add_table(policy->cpus);
+
+	/*
+	 * But we need OPP table to function so if it is not there let's
+	 * give platform code chance to provide it for us.
+	 */
+	ret = dev_pm_opp_get_opp_count(cpu_dev);
+	if (ret <= 0) {
+		dev_dbg(cpu_dev, "OPP table is not ready, deferring probe\n");
+		ret = -EPROBE_DEFER;
+		goto out_free_opp;
+	}
+
+	ret = dev_pm_opp_init_cpufreq_table(cpu_dev, &freq_table);
+	if (ret) {
+		dev_err(cpu_dev, "failed to init cpufreq table: %d\n", ret);
+		goto out_free_opp;
+	}
+
+	priv->cpu_dev = cpu_dev;
+
+	l2_clk = clk_get(cpu_dev, "l2");
+	if (!IS_ERR(l2_clk))
+		priv->l2_clk = l2_clk;
+
+	np = of_node_get(priv->cpu_dev->of_node);
+
+	if (np)
+		of_property_read_u32(np, "voltage-tolerance",
+				     &priv->l2_volt_tol);
+
+	of_node_put(np);
+
+	policy->driver_data = priv;
+	policy->clk = cpu_clk;
+	policy->freq_table = freq_table;
+
+	policy->suspend_freq = dev_pm_opp_get_suspend_opp_freq(cpu_dev) / 1000;
+
+	transition_latency = dev_pm_opp_get_max_transition_latency(cpu_dev);
+	if (!transition_latency)
+		transition_latency = CPUFREQ_ETERNAL;
+
+	policy->cpuinfo.transition_latency = transition_latency;
+	policy->dvfs_possible_from_any_cpu = true;
+
+	dev_pm_opp_of_register_em(policy->cpus);
+
+	return 0;
+
+out_free_opp:
+	dev_pm_opp_of_cpumask_remove_table(policy->cpus);
+	kfree(priv);
+out_put_regulator:
+	if (name)
+		dev_pm_opp_put_regulators(opp_table);
+out_put_clk:
+	clk_put(cpu_clk);
+
+	return ret;
+}
+
+static int cpufreq_online(struct cpufreq_policy *policy)
+{
+	/* We did light-weight tear down earlier, nothing to do here */
+	return 0;
+}
+
+static int cpufreq_offline(struct cpufreq_policy *policy)
+{
+	/*
+	 * Preserve policy->driver_data and don't free resources on light-weight
+	 * tear down.
+	 */
+	return 0;
+}
+
+static int cpufreq_exit(struct cpufreq_policy *policy)
+{
+	struct private_data *priv = policy->driver_data;
+
+	dev_pm_opp_free_cpufreq_table(priv->cpu_dev, &policy->freq_table);
+	dev_pm_opp_of_cpumask_remove_table(policy->related_cpus);
+	if (priv->reg_name)
+		dev_pm_opp_put_regulators(priv->opp_table);
+
+	clk_put(policy->clk);
+	kfree(priv);
+
+	return 0;
+}
+
+static struct cpufreq_driver dt_cpufreq_driver = {
+	.flags = CPUFREQ_STICKY | CPUFREQ_NEED_INITIAL_FREQ_CHECK |
+		 CPUFREQ_IS_COOLING_DEV,
+	.verify = cpufreq_generic_frequency_table_verify,
+	.target_index = set_target,
+	.get = cpufreq_generic_get,
+	.init = cpufreq_init,
+	.exit = cpufreq_exit,
+	.online = cpufreq_online,
+	.offline = cpufreq_offline,
+	.name = "krait-cpufreq-dt",
+	.suspend = cpufreq_generic_suspend,
+};
+
+static int dt_cpufreq_probe(struct platform_device *pdev)
+{
+	struct cpufreq_dt_platform_data *data = dev_get_platdata(&pdev->dev);
+	struct device_node *l2_np;
+	struct regulator *l2_regulator = NULL;
+	int ret;
+
+	/*
+	 * All per-cluster (CPUs sharing clock/voltages) initialization is done
+	 * from ->init(). In probe(), we just need to make sure that clk and
+	 * regulators are available. Else defer probe and retry.
+	 *
+	 * FIXME: Is checking this only for CPU0 sufficient ?
+	 */
+	ret = resources_available();
+	if (ret)
+		return ret;
+
+	cpus_shared_data = kzalloc(sizeof(struct shared_data), GFP_KERNEL);
+	if (!cpus_shared_data)
+		return -ENOMEM;
+
+	cpus_shared_data->curr_freq_table =
+		kzalloc(sizeof(int) * CONFIG_NR_CPUS, GFP_KERNEL);
+	if (!cpus_shared_data->curr_freq_table)
+		return -ENOMEM;
+
+	l2_np = of_find_node_by_name(NULL, "qcom,l2");
+	if (l2_np) {
+		struct device_node *vdd;
+
+		of_property_read_u32_array(l2_np, "l2-rates",
+					   cpus_shared_data->l2_rate, 3);
+		if (cpus_shared_data->l2_rate[0] &&
+		    cpus_shared_data->l2_rate[1] &&
+		    cpus_shared_data->l2_rate[2]) {
+			cpus_shared_data->l2_rate_set = true;
+			of_property_read_u32_array(l2_np, "l2-cpufreq",
+						   cpus_shared_data->l2_cpufreq,
+						   3);
+			of_property_read_u32_array(
+				l2_np, "l2-volt", cpus_shared_data->l2_volt, 3);
+		} else
+			dev_warn(&pdev->dev, "L2: failed to parse L2 rates\n");
+
+		if (!cpus_shared_data->l2_cpufreq[0] &&
+		    !cpus_shared_data->l2_cpufreq[1] &&
+		    !cpus_shared_data->l2_cpufreq[2] &&
+		    cpus_shared_data->l2_rate_set) {
+			int i;
+
+			dev_warn(
+				&pdev->dev,
+				"L2: failed to parse target cpu freq, using defaults\n");
+			for (i = 0; i < 3; i++)
+				cpus_shared_data->l2_cpufreq[i] =
+					cpus_shared_data->l2_rate[i];
+		}
+
+		if (cpus_shared_data->l2_volt[0] &&
+		    cpus_shared_data->l2_volt[1] &&
+		    cpus_shared_data->l2_volt[2] &&
+		    cpus_shared_data->l2_rate_set) {
+			vdd = of_parse_phandle(l2_np, "l2-supply", 0);
+
+			if (vdd) {
+				l2_regulator =
+					devm_regulator_get(&pdev->dev, vdd->name);
+				if (!IS_ERR(l2_regulator)) {
+					cpus_shared_data->l2_regulator =
+						l2_regulator;
+					cpus_shared_data->l2_volt_set = true;
+				} else {
+					dev_err(&pdev->dev,
+						"failed to get l2 supply, error=%pe\n",
+						l2_regulator);
+				}
+
+				of_node_put(vdd);
+			}
+		}
+
+		of_node_put(l2_np);
+	}
+
+	if (data) {
+		if (data->have_governor_per_policy)
+			dt_cpufreq_driver.flags |=
+				CPUFREQ_HAVE_GOVERNOR_PER_POLICY;
+
+		dt_cpufreq_driver.resume = data->resume;
+		if (data->suspend)
+			dt_cpufreq_driver.suspend = data->suspend;
+	}
+
+	ret = cpufreq_register_driver(&dt_cpufreq_driver);
+	if (ret)
+		dev_err(&pdev->dev, "failed register driver: %d\n", ret);
+
+	return ret;
+}
+
+static int dt_cpufreq_remove(struct platform_device *pdev)
+{
+	kfree(cpus_shared_data->curr_freq_table);
+	kfree(cpus_shared_data);
+	cpufreq_unregister_driver(&dt_cpufreq_driver);
+	return 0;
+}
+
+static struct platform_driver dt_cpufreq_platdrv = {
+	.driver = {
+		.name	= "krait-cpufreq-dt",
+	},
+	.probe		= dt_cpufreq_probe,
+	.remove		= dt_cpufreq_remove,
+};
+module_platform_driver(dt_cpufreq_platdrv);
+
+MODULE_ALIAS("platform:krait-cpufreq-dt");
+MODULE_AUTHOR("Ansuel Smith <ansuelsmth@gmail.com>");
+MODULE_DESCRIPTION("Krait cpufreq driver");
+MODULE_LICENSE("GPL");
-- 
2.27.0

